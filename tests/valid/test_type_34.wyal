//   #0 ITEM_ident():Expr
//   #1 TYPE_int()
//   #2 ITEM_ident():Coercion_Valid_8
//   #3 ITEM_ident():Expr
//   #4 ITEM_name(2, 3)
//   #5 TYPE_nom(4)
//   #6 TYPE_arr(5)
//   #7 TYPE_or(1, 6)
//   #8 ITEM_ident():this
//   #9 STMT_vardecl(7, 8)
//  #10 ()
//  #11 DECL_type(0, 9, 10)
//  #12 ITEM_ident():f
//  #13 ITEM_ident():Coercion_Valid_8
//  #14 ITEM_ident():Expr
//  #15 ITEM_name(13, 14)
//  #16 TYPE_nom(15)
//  #17 ITEM_ident():x
//  #18 STMT_vardecl(16, 17)
//  #19 (STMT_vardecl(16, 17))
//  #20 TYPE_int()
//  #21 ITEM_ident():$
//  #22 STMT_vardecl(20, 21)
//  #23 (STMT_vardecl(20, 21))
//  #24 DECL_fun(12, 19, 23)
//  #25 ITEM_ident():Coercion_Valid_8
//  #26 ITEM_ident():Expr
//  #27 ITEM_name(25, 26)
//  #28 TYPE_nom(27)
//  #29 ITEM_ident():x
//  #30 STMT_vardecl(28, 29)
//  #31 ITEM_ident():Coercion_Valid_8
//  #32 ITEM_ident():Expr
//  #33 ITEM_name(31, 32)
//  #34 TYPE_nom(33)
//  #35 TYPE_arr(34)
//  #36 ITEM_ident():Coercion_Valid_8
//  #37 ITEM_ident():Expr
//  #38 ITEM_name(36, 37)
//  #39 TYPE_nom(38)
//  #40 TYPE_and(35, 39)
//  #41 ITEM_ident():x$1
//  #42 STMT_vardecl(40, 41)
//  #43 (STMT_vardecl(28, 29),STMT_vardecl(40, 41))
//  #44 EXPR_var(42)
//  #45 EXPR_var(30)
//  #46 EXPR_eq(44, 45)
//  #47 EXPR_var(30) [@61:61]
//  #48 ITEM_ident():Coercion_Valid_8
//  #49 ITEM_ident():Expr
//  #50 ITEM_name(48, 49)
//  #51 TYPE_nom(50)
//  #52 TYPE_arr(51)
//  #53 EXPR_is(47, 52) [@61:71]
//  #54 STMT_block(46, 53)
//  #55 STMT_block(54)
//  #56 EXPR_var(42) [@90:90]
//  #57 EXPR_arrlen(56) [@89:91]
//  #58 TYPE_int()
//  #59 EXPR_is(57, 58)
//  #60 STMT_block(59)
//  #61 STMT_ifthen(55, 60)
//  #62 STMT_block(61)
//  #63 STMT_forall(43, 62)
//  #64 STMT_block(63)
//  #65 DECL_assert(64) [@89:91]
//  #66 ITEM_ident():Coercion_Valid_8
//  #67 ITEM_ident():Expr
//  #68 ITEM_name(66, 67)
//  #69 TYPE_nom(68)
//  #70 TYPE_arr(69)
//  #71 TYPE_not(70)
//  #72 ITEM_ident():Coercion_Valid_8
//  #73 ITEM_ident():Expr
//  #74 ITEM_name(72, 73)
//  #75 TYPE_nom(74)
//  #76 TYPE_and(71, 75)
//  #77 ITEM_ident():x$2
//  #78 STMT_vardecl(76, 77)
//  #79 (STMT_vardecl(28, 29),STMT_vardecl(76, 77))
//  #80 EXPR_var(78)
//  #81 EXPR_var(30)
//  #82 EXPR_eq(80, 81)
//  #83 TYPE_not(52)
//  #84 EXPR_is(47, 83)
//  #85 STMT_block(82, 84)
//  #86 STMT_block(85)
//  #87 EXPR_var(78) [@118:118]
//  #88 TYPE_int()
//  #89 EXPR_is(87, 88)
//  #90 STMT_block(89)
//  #91 STMT_ifthen(86, 90)
//  #92 STMT_block(91)
//  #93 STMT_forall(79, 92)
//  #94 STMT_block(93)
//  #95 DECL_assert(94) [@118:118]
//  #96 ITEM_ident():test
//  #97 ()
//  #98 ()
//  #99 DECL_fun(96, 97, 98)
// #100 CONST_bool():true
// #101 EXPR_const(100)
// #102 STMT_block(101)
// #103 CONST_int():1
// #104 EXPR_const(103) [@165:165]
// #105 CONST_int():2
// #106 EXPR_const(105) [@168:168]
// #107 CONST_int():3
// #108 EXPR_const(107) [@171:171]
// #109 EXPR_arrinit(104, 106, 108) [@164:172]
// #110 ITEM_ident():Coercion_Valid_8
// #111 ITEM_ident():Expr
// #112 ITEM_name(110, 111)
// #113 TYPE_nom(112)
// #114 EXPR_is(109, 113)
// #115 STMT_block(114)
// #116 STMT_ifthen(102, 115)
// #117 STMT_block(116)
// #118 DECL_assert(117) [@164:172]
// #119 ITEM_ident():Coercion_Valid_8
// #120 ITEM_ident():f
// #121 ITEM_name(119, 120)
// #122 CONST_int():1
// #123 EXPR_const(122) [@165:165]
// #124 CONST_int():2
// #125 EXPR_const(124) [@168:168]
// #126 CONST_int():3
// #127 EXPR_const(126) [@171:171]
// #128 EXPR_arrinit(123, 125, 127) [@164:172]
// #129 (EXPR_arrinit(123, 125, 127))
// #130 EXPR_invoke(?, 121, 129) [@162:173]
// #131 CONST_int():3
// #132 EXPR_const(131) [@178:178]
// #133 EXPR_eq(130, 132) [@162:178]
// #134 STMT_block(133)
// #135 CONST_int():1
// #136 EXPR_const(135) [@193:193]
// #137 ITEM_ident():Coercion_Valid_8
// #138 ITEM_ident():Expr
// #139 ITEM_name(137, 138)
// #140 TYPE_nom(139)
// #141 EXPR_is(136, 140)
// #142 STMT_block(141)
// #143 STMT_ifthen(134, 142)
// #144 STMT_block(143)
// #145 DECL_assert(144) [@193:193]
type Expr is (int|(Expr[]) this)


function f(Expr x) -> (int $)

assert "type invariant not satisfied":
    forall((Expr[])&Expr x, Expr y):
        if:
            x == y
        then:
            |x| is int


