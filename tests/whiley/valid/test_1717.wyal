type nat is (int x)
where:
    x >= 0


function inc(nat[] src) -> (nat[] result)

define inc_ensures_0(nat[] src, nat[] result) is:
    |result| == |src|


define inc_ensures_1(nat[] src, nat[] result) is:
    forall(int x):
        ((0 <= x) && (x < |src|)) ==> (result[x] > 0)


assert "type invariant not satisfied":
    forall(nat[] xs):
        if:
            xs == [1, 3, 5, 7, 9, 11]
            inc_ensures_0(xs, inc(xs))
            inc_ensures_1(xs, inc(xs))
        then:
            inc(xs) is nat[]


