type nat is (int x)
where:
    x >= 0


type Cash is (nat[] coins)
where:
    |coins| == |[1, 5, 10, 20, 50, 100, 500, 1000]|


function Cash(nat[] coins) -> (Cash $)

define Cash_requires_0(nat[] coins) is:
    forall(int i):
        ((0 <= i) && (i < |coins|)) ==> (coins[i] < |[1, 5, 10, 20, 50, 100, 500, 1000]|)


define Cash_loopinvariant_33(Cash cash, int i) is:
    (i >= 0) && (|cash| == |[1, 5, 10, 20, 50, 100, 500, 1000]|)


define Cash_loopinvariant_43(Cash cash, int i) is:
    forall(int j):
        ((0 <= j) && (j < |cash|)) ==> (cash[j] >= 0)


assert "loop invariant not restored":
    forall(Cash cash$1, Cash cash, int i, int i$1, nat[] coins, int c, Cash cash$2, int i$2):
        if:
            Cash_requires_0(coins)
            cash == [0, 0, 0, 0, 0, 0, 0, 0]
            i == 0
            Cash_loopinvariant_33(cash$1, i$1)
            Cash_loopinvariant_43(cash$1, i$1)
            i$1 < |coins|
            c == coins[i$1]
            cash$2 == cash$1[c:=cash$1[c] + 1]
            i$2 == (i$1 + 1)
        then:
            Cash_loopinvariant_43(cash$2, i$2)


