type nat is (int x)
where:
    x >= 0


define max(int[] xs, int max, int n) is:
    forall(int i):
        ((0 <= i) && (i < n)) ==> (max >= xs[i])
    exists(int i$1):
        ((0 <= i$1) && (i$1 < n)) && (max == xs[i$1])


function max(int[] items) -> (int r)

define max_requires_0(int[] items) is:
    |items| > 0


define max_loopinvariant_24(int[] items, nat i, int m) is:
    max(items, m, i)


assert "loop invariant does not hold on entry":
    forall(nat i, int m, int[] items):
        if:
            max_requires_0(items)
            i == 1
            m == items[0]
        then:
            max_loopinvariant_24(items, i, m)


