type nat is (int x)
where:
    x >= 0


function abs(int[] items) -> (nat[] $)

define abs_requires_0(int[] items) is:
    |items| > 0


function abs(int[] items, nat index) -> (nat[] $)

define abs_requires_0(int[] items, nat index) is:
    (index <= |items|) && forall(int i).(((0 <= i) && (i < index)) ==> (items[i] >= 0))


assert "type invariant not satisfied":
    forall(nat index, int[] items$1, int[] items):
        if:
            abs_requires_0(items, index)
            index != |items|
            items$1 == items[index:=abs(items[index])]
        then:
            abs(items$1, index + 1) is nat[]


function abs(int x) -> (nat $)

