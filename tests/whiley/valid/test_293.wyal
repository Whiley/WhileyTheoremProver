type nat is (int x)
where:
    x >= 0


type Cash is (nat[] coins)
where:
    |coins| == |[1, 5, 10, 20, 50, 100, 500, 1000]|


function Cash(nat[] coins) -> (Cash $)

define Cash_requires_0(nat[] coins) is:
    forall(int i):
        ((0 <= i) && (i < |coins|)) ==> (coins[i] < |[1, 5, 10, 20, 50, 100, 500, 1000]|)


define Cash_loopinvariant_29(int[] cash) is:
    |cash| == |[1, 5, 10, 20, 50, 100, 500, 1000]|


define Cash_loopinvariant_39(int[] cash) is:
    forall(int k):
        ((0 <= k) && (k < |cash|)) ==> (cash[k] >= 0)


assert "type invariant not satisfied":
    forall(int[] cash, int[] cash$3, nat i$3, nat i, nat[] coins):
        if:
            Cash_requires_0(coins)
            cash == [0, 0, 0, 0, 0, 0, 0, 0]
            i == 0
            Cash_loopinvariant_29(cash$3)
            Cash_loopinvariant_39(cash$3)
            i$3 >= |coins|
        then:
            cash$3 is Cash


