type char is (int x)
where:
    (0 <= x) && (x <= 255)


type State is ({char[] input, int pos} s)
where:
    s.pos >= 0


type Expr is (int|{int[] id} self)


type SyntaxError is ({int[] err} self)


type SExpr is (Expr|SyntaxError self)


function isDigit(char c) -> (bool $)

assert "type invariant not satisfied":
    forall(State st):
        if:
            either:
                st.pos < |st.input|
                !isDigit(st.input[st.pos])
            or:
                st.pos >= |st.input|
        then:
            {err: [117, 110, 107, 110, 111, 119, 110, 32, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 101, 110, 99, 111, 117, 110, 116, 101, 114, 101, 100]} is SExpr


