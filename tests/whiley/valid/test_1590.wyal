type BOp is (int op)
where:
    (op == 0) || ((op == 1) || ((op == 2) || (op == 3)))


type BinOp is ({Expr lhs, BOp op, Expr rhs} self)


type ListAccess is ({Expr index, Expr src} self)


type Expr is (int|(Expr[])|BinOp|ListAccess self)


function f(Expr e) -> (int $)

assert "type invariant not satisfied":
    if:
        f(1) == 1
        f([1, 2, 3]) == 3
    then:
        {lhs: 1, op: 0, rhs: 2} is Expr


