type nat is (int x)
where:
    x >= 0


define absent(int[] items, int item, int end) is:
    forall(int i):
        ((0 <= i) && (i < end)) ==> (items[i] != item)


define absent(int[] items, int item) is:
    absent(items, item, |items|)


define indexOf_ensures_1(int[] items, int item, int r) is:
    (r >= 0) || absent(items, item)


define indexOf_loopinvariant_26(int[] items, int item, nat i) is:
    absent(items, item, i)


assert "postcondition not satisfied":
    forall(nat i$3, nat i, int item, int[] items):
        if:
            i == 0
            indexOf_loopinvariant_26(items, item, i$3)
            i$3 >= |items|
        then:
            indexOf_ensures_1(items, item, -1)


