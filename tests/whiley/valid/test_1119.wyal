type nat is (int x)
where:
    x >= 0


define max(int[] xs, int max, int n) is:
    forall(int i):
        ((0 <= i) && (i < n)) ==> (max >= xs[i])
    exists(int i$1):
        ((0 <= i$1) && (i$1 < n)) && (max == xs[i$1])


function max(int[] items) -> (int r)

define max_requires_0(int[] items) is:
    |items| > 0


define max_loopinvariant_20(int[] items, nat i, int m) is:
    i <= |items|


define max_loopinvariant_24(int[] items, nat i, int m) is:
    max(items, m, i)


assert "loop invariant not restored":
    forall(int m$1, int m$3, nat i, int m, nat i$1, int m$2, nat i$2, int[] items):
        if:
            max_requires_0(items)
            i == 1
            m == items[0]
            max_loopinvariant_20(items, i$1, m$1)
            max_loopinvariant_24(items, i$1, m$1)
            i$1 < |items|
            either:
                items[i$1] > m$1
                m$2 == items[i$1]
                m$3 == m$2
            or:
                items[i$1] <= m$1
                m$3 == m$1
            i$2 == (i$1 + 1)
        then:
            max_loopinvariant_20(items, i$2, m$3)


