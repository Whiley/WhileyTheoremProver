type nat is (int x)
where:
    x >= 0


type Cash is (nat[] coins)
where:
    |coins| == |[1, 5, 10, 20, 50, 100, 500, 1000]|


function Cash(nat[] coins) -> (Cash $)

define Cash_requires_0(nat[] coins) is:
    forall(int i):
        ((0 <= i) && (i < |coins|)) ==> (coins[i] < |[1, 5, 10, 20, 50, 100, 500, 1000]|)


define Cash_loopinvariant_33(Cash cash, int i) is:
    (i >= 0) && (|cash| == |[1, 5, 10, 20, 50, 100, 500, 1000]|)


assert "loop invariant does not hold on entry":
    forall(Cash cash, int i, nat[] coins):
        if:
            Cash_requires_0(coins)
            cash == [0, 0, 0, 0, 0, 0, 0, 0]
            i == 0
        then:
            Cash_loopinvariant_33(cash, i)


