type PieceKind is (int x)
where:
    (0 <= x) && (x <= 5)


type Piece is ({bool colour, PieceKind kind} self)


type Board is ({bool flag, Piece[] rows} self)


define f_requires_0(Board board) is:
    |board.rows| > 0


assert "type invariant not satisfied":
    forall(Board board$1, Board board):
        if:
            f_requires_0(board)
            board$1 == board{rows:=board.rows[0:={colour: false, kind: 0}]}
        then:
            board$1 is Board


