// Copyright (c) 2011, David J. Pearce (djp@ecs.vuw.ac.nz)
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//    * Neither the name of the <organization> nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL DAVID J. PEARCE BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

include "Core.wyrl"

// ====================================================================
// Array Expressions
// ====================================================================

// An array is a mapping from an index value to another value.
term Array[Expr...]

@rank(2)
@name("And{Equals[VExpr,Array],BExpr...}")
reduce And{Equals[Type t, {|VExpr x, Array y|}] eq, BExpr... bs}:
    => let cs = { b[x\y] | b in bs }
       in And (eq ++ cs)

// ====================================================================
// Array Generators
// ====================================================================

// An array is a mapping from an index value to another value.
term ArrayGen[Expr,Expr]

@rank(2)
@name("ArrayGen[Expr,Num]")
reduce ArrayGen[Expr x, Num(real r)]:
    => let n = num r,
           xs = [ x | i in 0..n ]
       in Array(xs)

@rank(2)
@name("And{Equals[VExpr,ArrayGen],BExpr...}")
reduce And{Equals[Type t, {|VExpr x, ArrayGen y|}] eq, BExpr... bs}:
    => let cs = { b[x\y] | b in bs }
       in And (eq ++ cs)

// ====================================================================
// Length Expressions
// ====================================================================

@rank(0)
@name("LengthOf(Array)")
reduce LengthOf(Array[Expr... xs]):
    => Num((real) |xs|)


@rank(2)
@name("LengthOf(ArrayGen)")
reduce LengthOf(ArrayGen[Expr v, Expr n]):
    => n

// ====================================================================
// IndexOf Expressions
// ====================================================================

// An index of expression represents an access expresion into a given
// array (left) at a given index position (right).
term IndexOf[Expr,Expr]

@rank(0)
@name("IndexOf[Array]")
reduce IndexOf[Array[Expr... xs], Num(real i)]:
    => let j = num i
       in xs[j], if j >= 0 && j < |xs|

@rank(0)
@name("IndexOf[ArrayGen]")
reduce IndexOf[ArrayGen[Expr v,Expr n], Expr]:
    => v

// ====================================================================
// Expressions & Values
// ====================================================================

define Value as Array[Value...] | ArrayGen[Value,Value] | ...

define SExpr as VExpr | Array | ArrayGen | ...

define VExpr as IndexOf | ...

define Expr as SExpr | ...

