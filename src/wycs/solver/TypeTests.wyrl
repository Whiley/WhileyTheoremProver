// ====================================================================
// Inhabited
// ====================================================================

// The inhabited constructor is essentially a function which returns
// true or false as to whether ot not a given type reduces to Void.  In
// essence, this is about controlling the reduction process more precisely.

term Inhabited(Type)

@name("Inhabited_1")
reduce Inhabited(Atom t):
    => False, if (t == VoidT) || (t == NotT(AnyT))
    => True

// A conjunct in this normal form can be reduced to true in the
// general case
@name("Inhabited_2")
reduce Inhabited(AndT{NotT(Proton)... ts})
requires no { t in ts | t == AnyT }:
    => True

@name("Inhabited_3")
reduce Inhabited(ArrayT(Type t)):
    => Inhabited(t)

// ====================================================================
// Is
// ====================================================================

term Is[Expr,Type]

// No expression can yield the VoidT
@name("Is_1")
reduce Is[Expr e, VoidT]:
    => False

// Inverting a type test gives a type test
@name("Is_2")
reduce Not(Is[Expr e, Type t]):
    => Is([e,NotT(t)])

// Transitivity of type tests
@name("Is_3")
reduce And{Is[Expr e1, Type t1], Is[Expr e2, Type t2], BExpr... bs}
requires e1 == e2:
    => And({Is[e1,AndT{t1,t2}]} ++ bs)
