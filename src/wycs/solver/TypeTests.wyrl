// ====================================================================
// Is
// ====================================================================

term Is[Expr,Type]

// No expression can yield the VoidT
@name("Is_1")
reduce Is[Expr e, VoidT]:
    => False

// Inverting a type test gives a type test
@name("Is_2")
reduce Not(Is[Expr e, Type t]):
    => Is([e,NotT(t)])

// Transitivity of type tests
@name("Is_3")
reduce And{Is[Expr e1, Type t1], Is[Expr e2, Type t2], BExpr... bs}
requires e1 == e2:
    => And({Is[e1,AndT{t1,t2}]} ++ bs)
