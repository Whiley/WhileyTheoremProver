// Copyright (c) 2011, David J. Pearce (djp@ecs.vuw.ac.nz)
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//    * Neither the name of the <organization> nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL DAVID J. PEARCE BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

package wyrl.core

// ====================================================================
// Overview
// ====================================================================
//
// Defines a language of types similar to that found in this paper:
//
// * "Sound and Complete Flow Typing with Unions, Intersections and
//    Negations", David J. Pearce, In Proceedings of VMCAI, 2013.

// ====================================================================
// Not
// ====================================================================

term Not(Type)

reduce Not(Any):
    => Void

reduce Not(Void):
    => Any

reduce Not(Or{Type... es}):
    => let ns = { Not(e) | e in es }
       in And(ns)

reduce Not(And{Type... es}):
    => let ns = { Not(e) | e in es }
       in Or(ns)

// ====================================================================
// And
// ====================================================================

term And{Type...}

reduce And{Type t}:
    => t

reduce And{And{Type... xs}, Type... ys}:
    => And (xs ++ ys)

reduce And{Or{Type... xs}, Type... ys}:
    => let zs = { And(x ++ ys) | x in xs }
       in Or (zs)

// ====================================================================
// Or
// ====================================================================

term Or{Type...}

reduce Or{Type t}:
    => t

reduce Or{Or{Type... xs}, Type... ys}:
    => Or (xs ++ ys)

// ====================================================================
// Atoms
// ====================================================================

term Any
term Void
term Bool
term Int
term Real
term String

define Proton as Any | Void | Bool | Int | Real | String
define Atom as Proton | Not(Proton)

reduce And{Void, Type... xs}:
    => Void

reduce And{Any, Type... xs}:
    => And(xs)

reduce And{Proton a1, Proton a2, Type... ts}:
    => Void, if a1 != a2 && !(a2 is Any)

reduce And{Proton a1, Not(Proton a2), Type... ts}:
    => Void, if a1 == a2
    => And (a1 ++ ts), if a2 != Any

reduce Or{Any, Type... xs}:
    => Any

reduce Or{Void, Type... xs}:
    => Or(xs)

// ====================================================================
// Ref
// ====================================================================

term Ref(Type)

reduce Ref(Void):
    => Void

reduce And{Ref(Type t1), Ref(Type t2), Type... ts}:
    => And(Ref(And{t1,t2}) ++ ts)

reduce Or{Ref(Any) t, Ref(Type), Type... ts}:
    => Or (t ++ ts)

reduce And{Ref(Type t1), Not(Ref(Type t2)), Type... ts}:
    => And (Ref(And{t1,Not(t2)}) ++ ts)

// ====================================================================
// Meta
// ====================================================================

term Meta(Type)

reduce Meta(Void):
    => Void // dubious?

reduce And{Meta(Type t1), Meta(Type t2), Type... ts}:
    => And(Meta(And{t1,t2}) ++ ts)

reduce Or{Meta(Any) t, Meta(Type), Type... ts}:
    => Or (t ++ ts)

reduce And{Meta(Type t1), Not(Meta(Type t2)), Type... ts}:
    => And (Meta(And{t1,Not(t2)}) ++ ts)

// ====================================================================
// Term
// ====================================================================

term Term[string,Type...] // name,contents

reduce And{Term[string s1, Type t1], Term[string s2, Type t2], Type... ts}:
    => And(Term[s1,And{t1,t2}] ++ ts), if s1 == s2
    => Void

// MISSING NOT CASE

// ====================================================================
// Nominal
// ====================================================================

term Nominal[string,Type] // name,contents

reduce Nominal[string,Type t]:
    => t

// ====================================================================
// Fun
// ====================================================================
term Fun[Type,Type] // return, parameter

// ====================================================================
// Set
// ====================================================================
term Set[Type,{|Type...|}]

reduce Set[Type t, {|Void, Type... ts|}]:
    => Set[t,ts]

// MISSING INTERSECTION CASES
// MISSING NOT CASE

// ====================================================================
// Bag
// ====================================================================

term Bag[Type,{|Type...|}]

define SetOrBag as Set | Bag

reduce Bag[Type t, {|Void, Type... ts|}]:
    => Bag[t,ts]

// MISSING INTERSECTION CASES
// MISSING NOT CASE

// ====================================================================
// List
// ====================================================================

// should be flatterned!
term List[Type,[Type...]]

reduce List[Type t, [Type... t1s]]:
    => Void, if Void in t1s

reduce And{List l, Type t, Type... ts}:
    => Void, if (t is Proton || t is SetOrBag)
    => And (l ++ ts), if t is Not(Proton) || t is Not(SetOrBag)

reduce And{List[bool ub1, [Type... t1s]], List[bool ub2, [Type... t2s]], Type... ts}:
    => Void, if !(ub1 || ub2) && |t1s| != |t2s|
    => Void, if ub1 && !ub2 && |t1s| > |t2s|+1
    => Void, if !ub1 && ub2 && (|t2s| > (|t1s|+1))
    => let t3s = [ And{t1s[i],t2s[i]} | i in 0..|t1s| ]
       in And(List[false,t3s] ++ ts), if !(ub1 || ub2)

// ====================================================================
// General Type
// ====================================================================

define Type as Atom | Or | And | Not | Ref | Meta | Nominal | Term | Set | Bag | List

