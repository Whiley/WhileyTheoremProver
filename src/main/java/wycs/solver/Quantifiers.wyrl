// Copyright (c) 2011, David J. Pearce (djp@ecs.vuw.ac.nz)
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//    * Neither the name of the <organization> nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL DAVID J. PEARCE BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

include "Core.wyrl"
include "Arrays.wyrl"

// ====================================================================
// ForAll
// ====================================================================

term ForAll[{[Var,Type]...}, BExpr]

// Quantifying over a constant, or an empty set of variables is
// redundant (in which case we can simply drop the quantifier).
@rank(1)
@name("ForAll({},Bool)")
reduce ForAll[{[Var,Type]...qs}, BExpr be]
requires be is Bool || |qs| == 0:
       => be

// Negate a universal quantifier to produce an existential quantifier
@rank(0)
@name("Not(ForAll)")
reduce Not(ForAll[{[Var,Type]...} vars, BExpr be]):
       => Exists[vars, Not(be)]

// Merge nested universal quantifiers
@rank(1)
@name("ForAll[ForAll]")
reduce ForAll[{[Var,Type]...} xs, ForAll[{[Var,Type]...} ys, BExpr e]]:
       => ForAll[xs++ys,e]

// Eliminate unused variables as these can prevent instantiation.
@rank(1)
@name("ForAll[{Var,Var...},BExpr]")
reduce ForAll[{[Var v,Type], [Var,Type]... xs}, BExpr e]:
       => ForAll[xs,e], if !(contains[e,v])

// Push quantifier inwards?

// Attempt to instantiate quantifier with a given expression
@rank(3)
@name("And{BExpr,ForAll,BExpr...}")
infer And{
    // The expression we're instantiating over
    BExpr e1,
    // The Quantifier we're attempting to instantiate
    ForAll[{[Var, Type], [Var,Type]...} vs, BExpr e2] qf,
    // The rest
    BExpr... es}
requires !(e1 is ForAll):
    => let instantiations = instantiate[e1,vs,e2]
       in And({e1,qf} ++ es ++ instantiations), if |instantiations| > 0

// ====================================================================
// Exists
// ====================================================================

term Exists[{[Var,Type]...}, BExpr]

// Quantifying over a constant, or an empty set of variables is
// redundant (in which case we can simply drop the quantifier).
@rank(1)
@name("Exists[{},Bool]")
reduce Exists[{[Var,Type]...qs}, BExpr be]
requires be is Bool || |qs| == 0:
       => be

// Negate an existential quantifier to produce a universal quantifier.
@rank(2)
@name("Not(Exists)")
reduce Not(Exists[{[Var,Type]...} vars, BExpr be]):
       => ForAll[vars, Not(be)]

// Merge consequtive existentials together
@rank(1)
@name("Exists[Exists,BExpr]")
reduce Exists[{[Var,Type]...} xs, Exists[{[Var,Type]...} ys, BExpr e]]:
       => Exists[xs++ys,e]

// Move extenstentials outwards (?)
@rank(1)
@name("And{Exists,BExpr...}")
reduce And{Exists[{[Var,Type]...} vs, BExpr e], BExpr... es}:
       => Exists[vs, And(e++es)]

// ====================================================================
// Instantiate function
// ====================================================================

// Attempt to bind a quantified expression (right) with a concrete
// expression (left), generating one or more candidate bindings over one
// or more quantified variables. These bindings are then used to
// instantiate the quantified expression.
function instantiate[BExpr, {[Var,Type]...}, BExpr] => {BExpr}

// ====================================================================
// Contains function
// ====================================================================

// Determine whether the variable v is used within the expression e.
function contains[BExpr, Var] => bool

// ====================================================================
// Expressions & Values
// ====================================================================

define BExpr as ForAll | Exists | ...




